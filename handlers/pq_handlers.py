from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from database.models import polls, quizzes
from keyboards.keyboard_utils import keyboard as default_keyboard
from StatesGroup.state import UserMode
from database.models import user_data

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –æ–ø—Ä–æ—Å–∞
async def ask_regular_question(message: Message):
    user_id = message.from_user.id
    step = user_data[user_id]["regular_step"]
    poll = polls[step]

    kb_builder = ReplyKeyboardBuilder()
    for option in poll["options"]:
        kb_builder.button(text=option)
    keyboard = kb_builder.as_markup(resize_keyboard=True)

    await message.answer(poll["question"], reply_markup=keyboard)

@router.message(F.text == "üìã –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def start_regular(message: Message, state: FSMContext):
    await state.set_state(UserMode.poll)
    user_data[message.from_user.id] = {"regular_step": 0}
    await ask_regular_question(message)

@router.message(F.text.in_([option for poll in polls for option in poll["options"]]))
async def handle_regular_answer(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == UserMode.poll:
        user_id = message.from_user.id
        step = user_data[user_id]["regular_step"]
        user_data[user_id].setdefault("regular_answers", []).append(message.text)

        if step + 1 < len(polls):
            user_data[user_id]["regular_step"] += 1
            await ask_regular_question(message)
        else:
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!", reply_markup=default_keyboard)
            await state.set_state(UserMode.copy)

# --- –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ ---
async def ask_quiz_question(message: Message):
    user_id = message.from_user.id
    step = user_data[user_id]["quiz_step"]
    quiz = quizzes[step]

    kb_builder = ReplyKeyboardBuilder()
    for option in quiz["options"]:
        kb_builder.button(text=option)
    keyboard = kb_builder.as_markup(resize_keyboard=True)

    await message.answer(quiz["question"], reply_markup=keyboard)

@router.message(F.text == "üß† –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
async def start_quiz(message: Message, state: FSMContext):
    await state.set_state(UserMode.quiz)
    user_data[message.from_user.id] = {"quiz_step": 0, "correct_answers": 0}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫
    await ask_quiz_question(message)

@router.message(F.text.in_([option for quiz in quizzes for option in quiz["options"]]))
async def handle_quiz_answer(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == UserMode.quiz:
        user_id = message.from_user.id
        step = user_data[user_id]["quiz_step"]
        quiz = quizzes[step]
        correct_option = quiz["options"][quiz["correct_option_id"]]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        if message.text == correct_option:
            user_data[user_id]["correct_answers"] += 1
            await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ :)")
        else:
            await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ :(\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        if step + 1 < len(quizzes):
            user_data[user_id]["quiz_step"] += 1
            await ask_quiz_question(message)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            score = user_data[user_id]["correct_answers"]
            total_questions = len(quizzes)
            await message.answer(
                f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {score} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=default_keyboard
            )
            await state.set_state(UserMode.copy)